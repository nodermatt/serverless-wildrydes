service: wildrydes-serverless
# app and org for use with dashboard.serverless.com
# suggestion to remove the app value from https://github.com/serverless/serverless/issues/6684
app: niod-wildrydes
org: nicolasodermatt

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: dev
  environment:
    DYNAMODB_TABLE: Rydes
    DOMAIN_SUFFIX: tld
    
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
 # hello:
 #   handler: handler.hello
  teapot:
    handler: src/backend/teapot.hello
    environment:
      USER_POOL_ID: !Ref cognitoUserPool
      USER_POOL_CLIENT_ID: !Ref cognitoUserPoolClient
    events:
      - http:
          path: /teapot  
          method: get    
          cors: true # adds an OPTIONS method with Origin: * to the Endpoint
          # see more: https://github.com/serverless/serverless/issues/6684
          integration: lambda # suggested fix for error in AWS API testing "Lambda execution failed with status 200 due to customer function error: Cannot read property 'X-Amzn-Trace-Id' of null"      
  RequestUnicorn:
    handler: src/backend/requestUnicorn.handler
    environment:
      #USER_POOL_ID: eu-central-1_Bwox7k8gI
      #USER_POOL_ID: !Ref cognitoUserPool
      USER_POOL_ID: !Ref cognitoUserPool
      #USER_POOL_CLIENT_ID: 4v87asgakl8vmiujjrtje4n6mu
      #USER_POOL_CLIENT_ID: !Ref cognitoUserPoolClient
      USER_POOL_CLIENT_ID: !Ref cognitoUserPoolClient

    events:
     - http:
          path: /rides  
          method: post    
          cors: true # adds an OPTIONS method with Origin: * to the Endpoint
          integration: lambda # default: lambda-proxy. exposes claims at event.requestContext.authorizer.claims
     #      authorizer:
   #         name: wildrydez
   #         arn: arn:aws:cognito-idp:eu-central-1:183224933160:userpool/eu-central-1_HkrGy1GOi
            #arn: arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ
            
            #arn: "aws:cognito-idp:*:*:userpool/${self:environment.USER_POOL_ID}"
            #arn: Fn::ImportValue 'niod-${self:service}-UserPoolId'
            # optional, define which claims are available at events.cognitoPoolClaims.
            # claims:
              #- name
              #- email
          
plugins:
  - serverless-finch

custom:
  client:
    bucketName: niod-wildrydes
    distributionFolder: src/frontend
    errorDocument: index.html
  
resources:
  Resources:
    # the user pool
    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: niod-${self:service}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    # the client for the frontend app
    cognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: niod-${self:service}-user-pool-client
        UserPoolId:
          Ref: cognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
    # a specific resource
    RidesTable:
      # of type dynamodb table 
      Type: AWS::DynamoDB::Table
      Properties:
        # refer to environmental variable for name provider.environment....
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        # columns
        AttributeDefinitions:
          - AttributeName: RideId
            # type string
            AttributeType: S
        # primary key
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        # capacity of the table for cost management, tune according to requirements
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
